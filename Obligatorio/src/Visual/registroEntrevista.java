/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Visual;

import DataTypes.DataAspirante;
import DataTypes.DataEmpresa;
import DataTypes.DataEntrevista;
import DataTypes.DataOferta;
import Logica.logicaEmpresa;
import Logica.logicaEntrevista;
import Logica.logicaOferta;
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import javax.swing.DefaultListModel;

/**
 *
 * @author Estefan√≠a
 */
public class registroEntrevista extends javax.swing.JFrame {

    /**
     * Creates new form registroEntrevista
     */
    public registroEntrevista() {
        initComponents();
        CargarEmpresas();
        iniciarControles();
    }

    //Cargo la lista de Empresas en el combo
    private void CargarEmpresas() {
        try {
            ComboEmpresa.removeAllItems();
            List<DataEmpresa> lista = logicaEmpresa.getInstance().ListEmpresa();
            if (lista.isEmpty()) {
                throw new Exception("No hay Empresas ingresadas en el sistema.");
            } else {
                for (DataEmpresa e : lista) {
                    ComboEmpresa.addItem(e);
                }
            }
        } catch (Exception ex) {
            lblError.setText(ex.getMessage());
        }
    }

    private void iniciarControles() {
        //Oculto todo hasta que seleccione una empresa
        DefaultListModel modelVacio = new DefaultListModel();
        listOfertas.setModel(modelVacio);        
        listOfertas.setVisible(false);
        listAspirante.setModel(modelVacio);
        listAspirante.setVisible(false);
        btnVerCv.setVisible(false);
        btnAgendar.setVisible(false);
        btnRechazar.setVisible(false);        
        lblFechayHora.setVisible(false);
        Date hoy = new Date();
        calFecha.setDate(hoy);
        calFecha.setVisible(false);
        cmbHora.setVisible(false);
        cmbMinutos.setVisible(false);
        cmbHora.removeAllItems();
        cmbMinutos.removeAllItems();
        
        for (int a =1; a<61;a++){
            cmbMinutos.addItem(a);
            if (a<25){
                cmbHora.addItem(a);
            }
        }
        
    }

    //Metodo para cargar las Ofertas de la Empresa seleccionada
    private void cargarOfertas(DataEmpresa em) throws Exception {
        try {
            lblError.setText("");
            //traigo todas las ofertas
            List<DataOferta> listaOfertas = logicaOferta.getInstance().listaOferta();
            if (listaOfertas.isEmpty()) {
                throw new Exception("No hay Ofertas registradas en el sistema");
            }
            //Cargo la lista solo con las ofertas que pertenecen a la empresa seleccionada 
            DefaultListModel modelOferta = new DefaultListModel();
            for (DataOferta of : listaOfertas) {
                if (of.getEmpresa().getRut() == em.getRut()) {
                    modelOferta.addElement(of);
                }
            }
            if (modelOferta.isEmpty()) {
                throw new Exception("No hay Ofertas registradas para la Empresa seleccionada");
            }
            listOfertas.setModel(modelOferta);
        } catch (Exception e) {
            lblError.setText(e.getMessage());
        }
    }

    //Metodo para cargar los Aspirantes que solicitaron entrevista para la Oferta seleccionada
    private void cargarAspirantes(DataOferta of) throws Exception {
        try {
            lblError.setText("");
            if (of.getAspirante().isEmpty()) {
                throw new Exception("No hay Aspirantes registrados para la Oferta seleccionada");
            }
            //Cargo la lista de los Aspirantes 
            DefaultListModel modelAspirante = new DefaultListModel();
            for (DataAspirante as : of.getAspirante()) {
                modelAspirante.addElement(as);
            }
            listAspirante.setModel(modelAspirante);
        } catch (Exception e) {
            lblError.setText(e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitulo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listOfertas = new javax.swing.JList();
        ComboEmpresa = new javax.swing.JComboBox();
        lblEmpresa = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listAspirante = new javax.swing.JList();
        btnVerCv = new javax.swing.JButton();
        lblFechayHora = new javax.swing.JLabel();
        btnAgendar = new javax.swing.JButton();
        lblError = new javax.swing.JLabel();
        calFecha = new com.toedter.calendar.JDateChooser();
        btnRechazar = new javax.swing.JButton();
        cmbHora = new javax.swing.JComboBox();
        cmbMinutos = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitulo.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        lblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitulo.setText("Registro de Entrevista - Empresa");

        listOfertas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listOfertas.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        listOfertas.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listOfertasValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listOfertas);

        ComboEmpresa.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboEmpresaItemStateChanged(evt);
            }
        });

        lblEmpresa.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblEmpresa.setText("Empresa:");

        listAspirante.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listAspiranteValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(listAspirante);

        btnVerCv.setText("Ver CV");
        btnVerCv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerCvActionPerformed(evt);
            }
        });

        lblFechayHora.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFechayHora.setText("Hora y Fecha de Entrevista:");

        btnAgendar.setText("Agendar Entrevista");
        btnAgendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgendarActionPerformed(evt);
            }
        });

        lblError.setForeground(new java.awt.Color(255, 0, 0));
        lblError.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        calFecha.setDateFormatString("dd/MM/yyyy");

        btnRechazar.setText("Rechazar Solicitud");
        btnRechazar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRechazarActionPerformed(evt);
            }
        });

        cmbHora.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbMinutos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("Hora");

        jLabel2.setText("Minutos");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 647, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblError, javax.swing.GroupLayout.PREFERRED_SIZE, 707, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(76, 76, 76)
                                .addComponent(lblEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ComboEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblFechayHora, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                                    .addComponent(calFecha, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(25, 25, 25)
                                        .addComponent(btnVerCv, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(btnAgendar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnRechazar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(11, 11, 11))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cmbHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cmbMinutos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel2)
                                        .addGap(12, 12, 12)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)))
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComboEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(btnVerCv, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblFechayHora, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(calFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbMinutos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAgendar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRechazar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21)
                .addComponent(lblError, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVerCvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerCvActionPerformed
        // Mostrar el CV que esta guardado
        //Consultar con Alejandro en que directorio queda guardado y con que nombre para poder levantarlo
        try {
            DataAspirante as = (DataAspirante)listAspirante.getSelectedValue();
            String nombre = as.getApellido() + ", " + as.getNombre() + ".pdf";
            File path = new File("C:/pdf/" + nombre);
            Desktop.getDesktop().open(path);
        } catch (IOException ex) {
            lblError.setText(ex.getMessage());            
        } catch (Exception ex) {
            lblError.setText(ex.getMessage());            
        }
    }//GEN-LAST:event_btnVerCvActionPerformed

    private void ComboEmpresaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboEmpresaItemStateChanged
        // Cuando selecciona una empresa cargo la lista de Ofertas de la Empresa
        try {
            lblError.setText("");
            DataEmpresa emp = (DataEmpresa) ComboEmpresa.getSelectedItem();
            if (emp == null) {
                throw new Exception("Debe Seleccionar una Empresa");
            }
            //Pongo visible la lista de Ofertas
            listOfertas.setVisible(true);
            //Si tengo empresa seleccionada entonces llamo al metodo para cargar la lista de ofertas
            cargarOfertas(emp);
        } catch (Exception e) {
            lblError.setText(e.getMessage());
        }
    }//GEN-LAST:event_ComboEmpresaItemStateChanged

    private void listOfertasValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listOfertasValueChanged
        try {
            lblError.setText("");
            DataOferta of = (DataOferta) listOfertas.getSelectedValue();
            if (of == null) {
                throw new Exception("Debe Seleccionar una Oferta");
            }
            //Si tengo oferta seleccionada entonces llamo al metodo para cargar la lista de aspirantes
            listAspirante.setVisible(true);
            cargarAspirantes(of);
        } catch (Exception e) {
            lblError.setText(e.getMessage());
        }
    }//GEN-LAST:event_listOfertasValueChanged

    private void listAspiranteValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listAspiranteValueChanged
        try {
            lblError.setText("");
            DataAspirante as = (DataAspirante) listAspirante.getSelectedValue();
            if (as == null) {
                throw new Exception("Debe Seleccionar un Aspirante");
            }
            //Si tengo aspirante seleccionada entonces habilito el resto de los controles
            btnVerCv.setVisible(true);
            btnAgendar.setVisible(true);
            btnRechazar.setVisible(true);                    
            calFecha.setVisible(true);
            cmbHora.setVisible(true);
            cmbMinutos.setVisible(true);
        } catch (Exception e) {
            lblError.setText(e.getMessage());
        }
    }//GEN-LAST:event_listAspiranteValueChanged

    private void btnAgendarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgendarActionPerformed
        try {
            lblError.setText("");
            //Primero leo todos los datos que estan seleccionados e ingresados en el formulario
            DataAspirante as = (DataAspirante) listAspirante.getSelectedValue();
            if (as == null) {
                throw new Exception("Debe Seleccionar un Aspirante");
            }
            DataOferta of = (DataOferta) listOfertas.getSelectedValue();
            if (of == null) {
                throw new Exception("Debe Seleccionar una Oferta");
            }
            //Construyo la fecha de la entrevista con formato de fecha y hora
            //No estoy segura de que esto funcione bien asi
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm");
            Date f = calFecha.getDate();
            GregorianCalendar cal = new GregorianCalendar();
            cal.setTime(f);
            
            int hora = (int)cmbHora.getSelectedItem();
            int mintuos = (int)cmbMinutos.getSelectedItem();
            cal.set(Calendar.HOUR, hora);
            cal.set(Calendar.MINUTE, mintuos);
            Date fecha = cal.getTime();
            Date fechaActual = new Date();
            if(fechaActual.after(fecha)){
                throw new Exception("Debe seleccionar una fecha posterior al dia de hoy");
            }
            
            //Una vez que tengo todo cargado construyo la entrevista y la mando a la logica para dar de alta
            DataEntrevista ent = new DataEntrevista();
            ent.setAspirante(as);
            ent.setOferta(of);
            ent.setFechaEntrevista(fecha);
            logicaEntrevista.getInstance().agendarEntrevista(ent);
            //Luego de agendar la entrevista elimino la solicitud para que pueda volver a solicitar entrevista en un futuro y para que no siga saliendo en la lista
            logicaOferta.getInstance().rechazarEntrevista(as, of);
            iniciarControles();
            lblError.setText("Se ha agendado la entrevista");
        } catch (Exception e) {
            lblError.setText(e.getMessage());
        }
    }//GEN-LAST:event_btnAgendarActionPerformed

    private void btnRechazarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRechazarActionPerformed
        try {
            lblError.setText("");
            //Primero leo todos los datos que estan seleccionados e ingresados en el formulario
            DataAspirante as = (DataAspirante) listAspirante.getSelectedValue();
            if (as == null) {
                throw new Exception("Debe Seleccionar un Aspirante");
            }
            DataOferta of = (DataOferta) listOfertas.getSelectedValue();
            if (of == null) {
                throw new Exception("Debe Seleccionar una Oferta");
            }           
            logicaOferta.getInstance().rechazarEntrevista(as, of);
            iniciarControles();
            lblError.setText("Se ha rechazado la solicitud de Entrevista");
        } catch (Exception e) {
            lblError.setText(e.getMessage());
        }
    }//GEN-LAST:event_btnRechazarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(registroEntrevista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(registroEntrevista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(registroEntrevista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(registroEntrevista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new registroEntrevista().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox ComboEmpresa;
    private javax.swing.JButton btnAgendar;
    private javax.swing.JButton btnRechazar;
    private javax.swing.JButton btnVerCv;
    private com.toedter.calendar.JDateChooser calFecha;
    private javax.swing.JComboBox cmbHora;
    private javax.swing.JComboBox cmbMinutos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblEmpresa;
    private javax.swing.JLabel lblError;
    private javax.swing.JLabel lblFechayHora;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JList listAspirante;
    private javax.swing.JList listOfertas;
    // End of variables declaration//GEN-END:variables
}
